type Query {
    resorts: [Resort!]!
    resort(id: Int!): Resort
    resortBySlug(slug: String!): Resort
    waitTimeDate(resortSlug: String!, date: Date!): WaitTimeDate
	liftList(offset: Int!, limit: Int!, orderBy: String!, order: String!, name: String, typeID: Int, resortID: Int, isActive: Boolean): LiftList!
	lift(id: Int!): Lift
	uplifts(liftID: Int!, seasonYear: Int, month: Int, day: Int, hour: Int): [Uplift!]
}
type Mutation {
	createResort(name: String!, slug: String!) : Resort
	updateResort(id: Int!, name: String!, slug: String!) : Resort
}
type Resort {
    id: Int!
    name: String!
    slug: String!
    logoFilename: String!
    trailMapFilename: String!
	timezone: String!
	latitude: Float
	longitude: Float
    sortOrder: Int!
    dates: [WaitTimeDate!]
	lastDate: WaitTimeDate
    lifts: [Lift!]
}
type Lift {
    id: Int!
    name: String
    resort: Resort
	type: LiftType!
	occupancy: Int
	isActive: Boolean!
	upliftList(offset: Int!, limit: Int!, orderBy: String!, order: String!, seasonYear: Int, month: Int, day: Int, hour: Int): UpliftList!
	upliftSummaries: [UpliftSummary!]
	upliftGroupings(groupBy: String!, groupBy2: String): [UpliftGrouping!]
}
type WaitTimeDate {
	id: String!
    resort: Resort!
    date: Date!
    timePeriods: [WaitTimePeriod!]
}
type WaitTimePeriod {
    timestamp: Int!
    resortID: Int!
    waitTimes: [WaitTime!]!
}
type WaitTime {
    liftID: Int!
    seconds: Int!
} 
type UpliftGrouping {
	groupKey: Int!
	groupDescription: String!
	group2Key: Int
	group2Description: String
	upliftCount: Int!
	waitTimeAverage: Int!
}
type Uplift {
	id: Int!
	lift: Lift!
	season: Season!
	date: Date!
	waitSeconds: Int!
}
type UpliftSummary {
	lift: Lift!
	season: Season!
    upliftCount: Int!
	waitTimeAverage: Int!
}
type LiftList {
	count: Int!
	lifts: [Lift!]!
}
type UpliftList {
	count: Int!
	uplifts: [Uplift!]!
}
type Season {
	year: Int!
	description: String!
}
type LiftType {
	id: Int!
	description: String!
}

scalar Date